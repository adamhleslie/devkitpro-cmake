include_guard(GLOBAL)

macro(devkitpro_message level msg)
    if(${level} STREQUAL "CHECK_PASS" OR ${level} STREQUAL "CHECK_FAIL")
        message(${level} "${msg}")
    else()
        message(${level} "[devkitPro] ${msg}")
    endif()
endmacro()

function(devkitpro_find_file variable file_path)
    cmake_path(GET file_path STEM file_stem)
    devkitpro_message(CHECK_START "Finding ${file_stem}")
    if(DEFINED ${variable})
        if(EXISTS ${${variable}})
            devkitpro_message(CHECK_PASS "Using location from CMake variable ${variable}: ${${variable}}")
        else()
            devkitpro_message(CHECK_FAIL "Invalid location from CMake variable ${variable}: ${${variable}}")
            devkitpro_message(FATAL_ERROR "Invalid location from CMake variable ${variable}: ${${variable}}")
        endif()
    elseif(DEFINED ENV{${variable}})
        if(EXISTS $ENV{${variable}})
            set(${variable} $ENV{${variable}} PARENT_SCOPE)
            devkitpro_message(CHECK_PASS "Using location from environment variable ${variable}: $ENV{${variable}}")
        else()
            devkitpro_message(CHECK_FAIL "Invalid location from environment variable ${variable}: $ENV{${variable}}")
            devkitpro_message(FATAL_ERROR "Invalid location from environment variable ${variable}: $ENV{${variable}}")
        endif()
    else()
        if(NOT DEVKITPRO)
            devkitpro_message(CHECK_FAIL "DEVKITPRO must be defined")
            devkitpro_message(FATAL_ERROR "DEVKITPRO must be defined")
        endif()
        cmake_path(ABSOLUTE_PATH file_path BASE_DIRECTORY ${DEVKITPRO})
        if(EXISTS ${file_path})
            set(${variable} ${file_path} PARENT_SCOPE)
            devkitpro_message(CHECK_PASS "Found ${file_path}")
        else()
            devkitpro_message(CHECK_FAIL "Not at expected location ${file_path}")
            devkitpro_message(FATAL_ERROR "Not at expected location ${file_path}")
        endif()
    endif()
endfunction(devkitpro_find_file)